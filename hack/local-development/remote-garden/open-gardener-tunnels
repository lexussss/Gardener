#!/usr/bin/env bash
#
# Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source $(dirname "${0}")/../common/helpers

QUIC_SERVER_IMAGE=ghcr.io/mvladev/quic-reverse-http-tunnel/quic-server:v0.1.2
QUIC_CLIENT_IMAGE=ghcr.io/mvladev/quic-reverse-http-tunnel/quic-client-tcp:v0.1.2

APISERVER_SERVICE_NAME="gardener-apiserver"
APISERVER_LB_PORT=443
APISERVER_QUIC_PORT=9443
APISERVER_TARGET_PORT=10443

ADMISSION_CONTROLLER_SERVICE_NAME="gardener-admission-controller"
ADMISSION_CONTROLLER_LB_PORT=444
ADMISSION_CONTROLLER_QUIC_PORT=9444
ADMISSION_CONTROLLER_TARGET_PORT=10444

CA_NAME=quic-tunnel-ca
SERVER_NAME=quic-tunnel-server
CLIENT_NAME=quic-tunnel-client
CERTS_DIR=$(dirname $(realpath "${0}"))/../../../dev/tls

checkPrereqs() {
  if [ "$(k8s_env)" != "$REMOTE" ]; then
    echo "KUBECONFIG must point to a cluster with a garden namespace labeled with gardener.cloud/purpose=remote-garden"
    return 1
  fi
  if ! command -v host > /dev/null; then
    echo "host command must be available"
    return 1
  fi
}

applyQuicLBService() {
  cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: Service
metadata:
  name: quic-lb
  namespace: garden
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  selector:
    app: quic-server
  ports:
  - name: $APISERVER_SERVICE_NAME
    protocol: UDP
    port: $APISERVER_LB_PORT
    targetPort: $APISERVER_QUIC_PORT
  - name: $ADMISSION_CONTROLLER_SERVICE_NAME
    protocol: UDP
    port: $ADMISSION_CONTROLLER_LB_PORT
    targetPort: $ADMISSION_CONTROLLER_QUIC_PORT
  externalTrafficPolicy: Cluster
EOF
}

waitForQuicLBServiceToBeReady() {
  while svcIngress=''; do
    ingress=$(kubectl -n garden get svc quic-lb -o go-template="{{ index .status.loadBalancer.ingress 0 }}" 2> /dev/null)
    if [[ $ingress == *"hostname"* ]]; then
      svcIngress="hostname"
      break
    fi

    if [[ $ingress == *"ip"* ]]; then
      svcIngress="ip"
      break
    fi

    sleep 2s
  done

  until host "$(kubectl -n garden get svc quic-lb -o go-template="{{ index (index .status.loadBalancer.ingress 0).$svcIngress }}")"; do
    sleep 2s
  done
  kubectl -n garden get svc quic-lb -o go-template="{{ index (index .status.loadBalancer.ingress 0).$svcIngress }}"
}

deleteQuicLBService() {
  kubectl -n garden delete svc quic-lb --ignore-not-found
}

applyQuicServerPod() {
  cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: quic-server
    networking.gardener.cloud/to-dns: allowed
    networking.gardener.cloud/to-public-networks: allowed
  name: quic-server
  namespace: garden
spec:
  containers:
  - args:
    - --listen-tcp=0.0.0.0:$APISERVER_TARGET_PORT
    - --listen-quic=0.0.0.0:$APISERVER_QUIC_PORT
    - --cert-file=/certs/tls.crt
    - --cert-key=/certs/tls.key 
    - --client-ca-file=/certs/ca.crt
    image: "$QUIC_SERVER_IMAGE"
    imagePullPolicy: IfNotPresent
    name: $APISERVER_SERVICE_NAME-quic-server
    volumeMounts:
    - name: quic-tls
      mountPath: "/certs"
      readOnly: true
    resources:
      limits:
        cpu: 50m
        memory: 128Mi
      requests:
        cpu: 20m
        memory: 64Mi
  - args:
    - --listen-tcp=0.0.0.0:$ADMISSION_CONTROLLER_TARGET_PORT
    - --listen-quic=0.0.0.0:$ADMISSION_CONTROLLER_QUIC_PORT
    - --cert-file=/certs/tls.crt
    - --cert-key=/certs/tls.key 
    - --client-ca-file=/certs/ca.crt
    image: "$QUIC_SERVER_IMAGE"
    imagePullPolicy: IfNotPresent
    name: $ADMISSION_CONTROLLER_SERVICE_NAME-quic-server
    volumeMounts:
    - name: quic-tls
      mountPath: "/certs"
      readOnly: true
    resources:
      limits:
        cpu: 50m
        memory: 128Mi
      requests:
        cpu: 20m
        memory: 64Mi
  volumes:
  - name: quic-tls
    secret:
      secretName: quic-tls
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  restartPolicy: Always
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: quic-tls
  namespace: garden
data:
  ca.crt: $(base64 -w0 "$CERTS_DIR/$CA_NAME.crt")
  tls.crt: $(base64 -w0 "$CERTS_DIR/$SERVER_NAME.crt")
  tls.key: $(base64 -w0 "$CERTS_DIR/$SERVER_NAME.key")
EOF
}

waitForQuicServerPodToBeReady() {
  until test "$(kubectl -n garden get pods quic-server --no-headers | awk '{print $2}')" = "2/2"; do
    sleep 2s
  done
}

deleteQuicServerPod() {
  kubectl -n garden delete pod quic-server --ignore-not-found
  kubectl -n garden delete secret quic-tls --ignore-not-found
}

applyGardenerServices() {
  cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: Service
metadata:
  name: $APISERVER_SERVICE_NAME
  namespace: garden
spec:
  selector:
    app: quic-server
  ports:
  - protocol: TCP
    port: 443
    targetPort: $APISERVER_TARGET_PORT
  type: ClusterIP
---
kind: Service
apiVersion: v1
metadata:
  name: $ADMISSION_CONTROLLER_SERVICE_NAME
  namespace: garden
spec:
  selector:
    app: quic-server
  ports:
  - protocol: TCP
    port: 443
    targetPort: $ADMISSION_CONTROLLER_TARGET_PORT
EOF
}

deleteGardenerServices() {
  kubectl -n garden delete svc $APISERVER_SERVICE_NAME --ignore-not-found
  kubectl -n garden delete svc $ADMISSION_CONTROLLER_SERVICE_NAME --ignore-not-found
}

usage() {
  echo "Usage:"
  echo "> open-gardener-tunnels [ -h | -c | ip | hostname ]"
  echo
  echo "Prerequisites:"
  echo "* KUBECONFIG pointing to a cluster with a garden namespace labeled with gardener.cloud/purpose=remote-garden"
  echo "* \`host\` command available"

  exit 0
}

if [ "$1" == "-c" ]; then
  echo "Shutting down quic clients..."
  docker rm -f $APISERVER_SERVICE_NAME-quic-client $ADMISSION_CONTROLLER_SERVICE_NAME-quic-client 2> /dev/null || true

  echo "Deleting gardener services..."
  deleteGardenerServices
  
  echo "Deleting quic server pod..."
  deleteQuicServerPod  

  echo "Deleting quic LB service..."
  deleteQuicLBService
  
  exit 0
elif [ "$1" == "-h" ]; then
  usage
fi

LABEL="${1:-remote-garden}"

echo "Checking prerequisites..."
checkPrereqs

echo "Generating tunnel certificates..."
mkdir -p "$CERTS_DIR"
$(dirname "${0}")/generate-certs $CA_NAME $SERVER_NAME $CLIENT_NAME "$CERTS_DIR"

echo "Applying quic LB service..."
applyQuicLBService && sleep 2s

echo "Waiting for quic LB service to be ready..."
output=$(waitForQuicLBServiceToBeReady)
loadbalancerHostname=$(echo "$output" | tail -n1)
echo "LoadBalancer hostname or IP is $loadbalancerHostname"

echo "Applying quic server pod..."
deleteQuicServerPod
applyQuicServerPod

echo "Waiting for quic server pod to be ready..."
waitForQuicServerPodToBeReady

echo "Applying gardener services..."
applyGardenerServices

echo "Starting quic clients..."

# the DNS name 'host.docker.internal' is only available for containers run by docker
# for desktop on Mac / Windows - otherwise use localhost.
# Check: desktop on Mac / Windows has not docker0 interface on the host
# should be run on the actual host (important when running docker over ssh)
hostname="host.docker.internal"
if ip addr show docker0 > /dev/null 2>&1; then
    hostname="localhost"
fi

docker run \
  -d \
  --name $APISERVER_SERVICE_NAME-quic-client \
  -l "$LABEL" \
  --network host  \
  --rm \
  -v "$CERTS_DIR":/certs \
  $QUIC_CLIENT_IMAGE \
  --server="$loadbalancerHostname:$APISERVER_LB_PORT" \
  --upstream="$hostname:$API_SERVER_SECURE_PORT" \
  --ca-file=/certs/$CA_NAME.crt \
  --cert-file=/certs/$CLIENT_NAME.crt  \
  --cert-key=/certs/$CLIENT_NAME.key

docker run \
  -d \
  --name $ADMISSION_CONTROLLER_SERVICE_NAME-quic-client \
  -l "$LABEL" \
  --network host  \
  --rm \
  -v "$CERTS_DIR":/certs \
  $QUIC_CLIENT_IMAGE \
  --server="$loadbalancerHostname:$ADMISSION_CONTROLLER_LB_PORT" \
  --upstream="$hostname:$ADMISSION_CONTROLLER_SECURE_PORT" \
  --ca-file=/certs/$CA_NAME.crt \
  --cert-file=/certs/$CLIENT_NAME.crt \
  --cert-key=/certs/$CLIENT_NAME.key
